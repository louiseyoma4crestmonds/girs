"""
Django settings for crestlearn project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import json
import os
import environ
from datetime import timedelta
from celery.schedules import crontab

# Initialise environment variables
ENV = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tx-7eb7xe+1s*atyx*^^1!!=uj1v39_^th0w(7k@lb&b+#054@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # ASGI applicatons
    'daphne',
    'channels',

    # Django Applications
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Local Applications
    'api',
    'enrollment_app.apps.EnrollmentAppConfig',


    # Third Party Applications
    'rest_framework',

    # 'rest_framework.authtoken',
    'django_rest_passwordreset',
    'corsheaders',
    'knox',

]

AUTH_USER_MODEL = 'api.CrestlearnUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]


CORS_ORIGIN_ALLOW_ALL = True
"""CORS_ORIGIN_WHITELIST = (
  'http://localhost:8000',
)"""

# Configuration settings for REST_KNOX authentication
REST_KNOX = {
    # 'TOKEN_TTL': timedelta(hours=10), Uncomment if you want to set expiration hours for token.
    'TOKEN_TTL': None,  # Token will never expire

    # Number of token that can be issued per user
    'TOKEN_LIMIT_PER_USER': 2,

}

ROOT_URLCONF = 'crestlearn.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crestlearn.wsgi.application'
ASGI_APPLICATION = 'crestlearn.asgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'sqlite3.db',
    }

}




# Email
"""
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = ENV('EMAIL_HOST')
EMAIL_USE_TSL = True
EMAIL_PORT = ENV('EMAIL_PORT')
EMAIL_HOST_USER = ENV('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = ENV('EMAIL_HOST_PASSWORD')
"""


EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'static')


# Password validation.
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ]
}


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240 

# Channels layer setup

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)]
        },
    },
}


AWS_CRESTLEARN_CERTIFICATE_TEMPLATE_BUCKET = ENV(
    'AWS_CRESTLEARN_CERTIFICATE_TEMPLATE_BUCKET')
AWS_ACCESS_KEY_ID = ENV('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = ENV('AWS_SECRET_ACCESS_KEY')


# Celery settings
BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Lagos'

# Task to be triggered
CELERY_BEAT_SCHEDULE = {
    'check-subscription-expirations': {
        'task': 'enrollment_app.tasks.review_package_expiration',
        'schedule': crontab(),
    }
}
